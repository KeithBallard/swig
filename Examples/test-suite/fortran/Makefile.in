#######################################################################
# Makefile for Fortran test-suite
#######################################################################

LANGUAGE     = fortran
SCRIPTSUFFIX = _runme.F90
FORTRAN_SO   = @FORTRAN_SO@

CC           = @CC@
CXX          = @CXX@
FC           = @FC@
CCSHARED     = @CCSHARED@
LDSHARED     = @LDSHARED@
CXXSHARED    = @CXXSHARED@
FCFLAGS      = @FCFLAGS@
CXXFLAGS     = @BOOST_CPPFLAGS@ @PLATCXXFLAGS@

srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@

CPP_TEST_CASES = \
	fortran_bindc \
	fortran_naming

C_TEST_CASES = \
	fortran_array_typemap \
	fortran_bindc_c \
	fortran_bindc_all \
	fortran_global_const

# C++11 tests: wrapper error
FAILING_CPP_TESTS += \
  cpp11_lambda_functions \
  cpp11_rvalue_reference2 \
  cpp11_rvalue_reference3 \
  cpp11_template_explicit

# C++11 tests: link error
FAILING_CPP_TESTS += \
  cpp11_default_delete \
  cpp11_li_std_array

# C++11 tests: fortran error
FAILING_CPP_TESTS += \
  cpp11_strongly_typed_enumerations

# Private 'operator new' causes build error since it's not detected by the type
# traits
ifneq (,$(HAVE_CXX11_COMPILER))
FAILING_CPP_TESTS += private_assign
endif

# Failed to compile fortran
FAILING_CPP_TESTS += \
  abstract_signature \
  contract \
  director_classes \
  director_default \
  director_detect \
  director_overload2 \
  extend_default \
  fvirtual \
  inherit_target_language \
  kind \
  li_attribute \
  li_std_map \
  multiple_inheritance \
  multiple_inheritance_abstract \
  multiple_inheritance_interfaces \
  multiple_inheritance_nspace \
  multiple_inheritance_shared_ptr \
  namespace_class \
  nested_scope \
  nested_workaround \
  overload_arrays \
  overload_complicated \
  overload_method \
  overload_return_type \
  overload_simple \
  overload_subtype \
  smart_pointer_template_defaults_overload \
  template_methods \
  using_composition \
  using_extend \
  using_inherit \
  variable_replacement \
  virtual_poly

# Link errors
FAILING_MULTI_CPP_TESTS += \
  clientdata_prop \
  import_stl \
  template_typedef_import

include $(srcdir)/../common.mk

# Rules for the different types of tests
%.cpptest:
	$(setup)
	+$(swig_and_compile_cpp) NOLINK=false
	$(run_testcase)

%.ctest:
	$(setup)
	+$(swig_and_compile_c) NOLINK=false
	$(run_testcase)

%.multicpptest:
	$(setup)
	+$(swig_and_compile_multi_cpp)
	+$(link_multi_cpp)
	$(run_testcase)

# Compiles a multiple-module library
link_multi_cpp = \
        for f in `cat $(top_srcdir)/$(EXAMPLES)/$(TEST_SUITE)/$*.list` ; do \
          ALL_OBJS="$${ALL_OBJS} $${f}_wrap.o $${f}_fort.o" ; \
        done ; \
	@FORTRANCXXSHARED@ $(CXXFLAGS) $(LDFLAGS) $$ALL_OBJS \
		$(FCLIBS) -o $(LIBPREFIX)$*$(FORTRAN_SO)

# Runs the testcase.
run_testcase = \
	if [ -f $(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then \
	$(COMPILETOOL) $(FC) $(FCFLAGS) $(CCSHARED) $(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) -c; \
	$(COMPILETOOL) $(FC) $(FCFLAGS) $(CCSHARED) -o $*_runme.exe $(SCRIPTPREFIX)$*_runme.@OBJEXT@ $(LIBPREFIX)$*$(FORTRAN_SO); \
	env LD_LIBRARY_PATH=.:$$LD_LIBRARY_PATH $(RUNTOOL) ./$*_runme.exe; \
	fi

%.clean:
	@rm -f $*.o $*.a $*_runme.exe
	@rm -rf $*.dSYM
	find . -name $*.f90 -and -not -name $*_runme.F90 -exec rm {} \;
clean:
	$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile SRCDIR='$(SRCDIR)' fortran_clean
